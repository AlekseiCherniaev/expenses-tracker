services:
  api:
    image: ${DOCKERHUB_USERNAME}/expenses_tracker:latest
    container_name: api
    networks:
      - common_network
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/api/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - common_network

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    volumes:
      - minio-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - common_network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: [ "redis-server", "--save", "", "--appendonly", "no" ]
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 32M
        reservations:
          cpus: '0.05'
          memory: 16M
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - common_network

  migrations:
    container_name: migrations
    build: .
    command: ["/app/.venv/bin/alembic", "upgrade", "head"]
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - common_network

  nginx:
    image: ${DOCKERHUB_USERNAME}/expenses_frontend:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot-www:/var/www/certbot
    depends_on:
      - api
    networks:
      - common_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    env_file:
      - .env
    command: [
      "certonly",
      "--standalone",
      "--preferred-challenges", "http",
      "--email=${CERTBOT_EMAIL}",
      "--agree-tos",
      "--no-eff-email",
      "-d", "${DOMAIN}",
      "-d", "www.${DOMAIN}",
      "-d", "storage.${DOMAIN}",
      "--expand"
    ]

  certbot-renew:
    build:
      context: .
      dockerfile: Dockerfile.certbot-renew
    container_name: certbot_renew
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot-www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: sh -c "while :; do certbot renew --webroot -w /var/www/certbot && docker exec nginx nginx -s reload; sleep 12h; done"
    restart: unless-stopped
    networks:
      - common_network

networks:
  common_network:
    name: common_network
    driver: bridge

volumes:
  minio-data:
  postgres:
    driver: local
    name: expenses_postgres_data
  certbot-etc:
  certbot-var:
