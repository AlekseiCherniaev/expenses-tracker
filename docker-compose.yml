services:
  api:
    image: ${DOCKERHUB_USERNAME}/expenses_tracker:latest
    container_name: api
    expose:
      - 8000
    env_file:
      - .env
    networks:
      - common_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/api/health\")' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - common_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
        reservations:
          cpus: '0.2'
          memory: 256M
    mem_limit: 1024m
    cpus: 0.5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    expose:
      - 9000
      - 9001
    env_file:
      - .env
    volumes:
      - minio-data:/data
    networks:
      - common_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    mem_limit: 256m
    cpus: 0.2
    restart: unless-stopped

  minio-init:
    image: minio/mc:latest
    container_name: minio_init
    env_file:
      - .env
    networks:
      - common_network
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
        mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc mb -p myminio/loki &&
        mc mb -p myminio/tempo &&
        echo 'MinIO buckets created successfully'
      "

  redis:
    image: redis:7-alpine
    container_name: redis
    command: [ "redis-server", "--appendonly", "yes" ]
    expose:
      - 6379
    env_file:
      - .env
    volumes:
      - redis-data:/data
    networks:
      - common_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
    mem_limit: 64m
    cpus: 0.1
    restart: unless-stopped

  migrations:
    build: .
    container_name: migrations
    command: [ "/app/.venv/bin/alembic", "upgrade", "head" ]
    env_file:
      - .env
    networks:
      - common_network
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: ${DOCKERHUB_USERNAME}/expenses_frontend:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot-www:/var/www/certbot
      - /etc/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    networks:
      - common_network
    depends_on:
      api:
        condition: service_healthy

  certbot:
    image: certbot/certbot
    container_name: certbot
    env_file:
      - .env
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: [
      "certonly",
      "--standalone",
      "--preferred-challenges", "http",
      "--email=${CERTBOT_EMAIL}",
      "--agree-tos",
      "--no-eff-email",
      "-d", "${DOMAIN}",
      "-d", "www.${DOMAIN}",
      "-d", "storage.${DOMAIN}",
      "-d", "grafana.${DOMAIN}",
      "-d", "prometheus.${DOMAIN}",
      "--expand"
    ]

  certbot-renew:
    build:
      context: .
      dockerfile: Dockerfile.certbot-renew
    container_name: certbot_renew
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot-www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - common_network
    entrypoint: sh -c "while :; do certbot renew --webroot -w /var/www/certbot && docker exec nginx nginx -s reload; sleep 12h; done"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    expose:
      - 9090
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - common_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - .env
    expose:
      - 3000
    environment:
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}/
      GF_INSTALL_PLUGINS: grafana-pyroscope-datasource
      HTTP_PROXY: http://${GRAFANA_PROXY_USER}:${GRAFANA_PROXY_PASSWORD}@${GRAFANA_PROXY_HOST}:${GRAFANA_PROXY_PORT}
      HTTPS_PROXY: https://${GRAFANA_PROXY_USER}:${GRAFANA_PROXY_PASSWORD}@${GRAFANA_PROXY_HOST}:${GRAFANA_PROXY_PORT}
      NO_PROXY: localhost,127.0.0.1
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - common_network
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    mem_limit: 512m
    cpus: 0.3

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    expose:
      - 3100
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./configs/loki.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - common_network
    depends_on:
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3100/ready" ]
      interval: 30s
      timeout: 10s
      retries: 5

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    expose:
      - 9080
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/promtail.yaml:/etc/promtail/config.yml
      - promtail-positions:/tmp
    networks:
      - common_network
    depends_on:
      loki:
        condition: service_healthy

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file=/etc/tempo.yaml
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./configs/tempo.yaml:/etc/tempo.yaml
      - tempo-wal:/var/tempo/wal
      - tempo-blocks:/var/tempo/blocks
      - tempo-generator:/var/tempo/generator
    ports:
      - "3200:3200"
    expose:
      - 4317
      - 4318
    networks:
      - common_network
    depends_on:
      tempo-init:
        condition: service_completed_successfully
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3200/ready"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

  tempo-init:
    image: grafana/tempo:latest
    user: root
    entrypoint: [ "chown" ]
    command: [ "-R", "10001:10001", "/var/tempo" ]
    volumes:
      - tempo-wal:/var/tempo/wal
      - tempo-blocks:/var/tempo/blocks
      - tempo-generator:/var/tempo/generator
    networks:
      - common_network

networks:
  common_network:
    name: common_network
    driver: bridge

volumes:
  minio-data:
  redis-data:
  postgres:
    driver: local
    name: expenses_postgres_data
  certbot-etc:
  certbot-var:
  grafana-data:
  loki-data:
  promtail-positions:
  tempo-wal:
  tempo-blocks:
  tempo-generator: